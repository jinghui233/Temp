using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

namespace ECFramework
{
    public class Pool
    {
        public Dictionary<string, EntityPool> NamePool = new();
        public Transform transform;
        public Pool(Transform transform)
        {
            this.transform = transform;
        }
        public void Create(string defName)
        {
            EntityPool entityPool = new(defName, transform);
            NamePool.Add(defName, entityPool);
        }
        public Entity Spawn(string name)
        {
            Entity entity = NamePool[name].GetInstance();
            AssembleSubEntities(entity);
            entity.SetReferences();
            entity.OnSpawn();
            return entity;
        }
        private void AssembleSubEntities(Entity entity)
        {
            if (entity.SubEntities == null)
            {
                return;
            }
            for (int i = 0; i < entity.SubEntities.Count; i++)
            {
                entity.SubEntities[i] = Spawn(entity.SubEntities[i].DefName);
            }
            for (int i = 0; i < entity.SubEntities.Count; i++)
            {
                AssembleSubEntities(entity.SubEntities[i]);
            }
        }
        public T Spawn<T>(string name) where T : Entity
        {
            return Spawn(name) as T;
        }
        public void UnSpawn(Entity entity)
        {
            Disassemble(entity);
            NamePool[entity.DefName].ReturnInstance(entity);
        }
        private void Disassemble(Entity entity)
        {
            if (entity.SubEntities == null)
            {
                return;
            }
            for (int i = 0; i < entity.SubEntities.Count; i++)
            {
                Disassemble(entity.SubEntities[i]);
            }
            for (int i = 0; i < entity.SubEntities.Count; i++)
            {
                string defName = entity.SubEntities[i].DefName;
                UnSpawn(entity.SubEntities[i]);
                entity.SubEntities[0] = new Entity() { DefName = defName };
            }
        }
    }
}
